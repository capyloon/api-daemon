// Various dweb related features:
// - DID management
// - UCAN
// - p2p discovery

dictionary Did {
    name: str // A local, human readable description for this DID.
    uri: str  // The uri representation of the DID.
}

enum DidError {
    NameAlreadyExists
    UnknownDid
    InternalError
}

enum UcanError {
    NoUiProvider
    InternalError
    InvalidAudience
    InvalidToken
    UiCancel
}

dictionary Capability {
    scope: url
    action: str
}

dictionary GrantedCapabilities {
    issuer: Did
    capabilities: Capability*
    not_before: date
    expiration: date
}

dictionary RequestedCapabilities {
    url: url                  // The url of the calling page.
    audience: str             // Caller DID
    capabilities: Capability+ // The set of requested capabilities
}

callback UcanProvider {
    fn grant_capabilities(capabilities: RequestedCapabilities) -> GrantedCapabilities
}

// Encapsulation of a UCAN.
interface Ucan {
    // Returns the base64 encoded representation.
    fn encoded() -> str, UcanError

    // Remove this UCAN from the set of registered UCANs.
    fn remove() -> void, UcanError

    blocked: bool
}

// The public representation of a peer.
// This includes the user's did, a device id and label.
dictionary Peer {
    did: str
    device_id: str
    device_desc: str
}

enum ConnectErrorKind {
    NotConnected
    NotPaired
    Denied
    Other
}

dictionary ConnectError {
    kind: ConnectErrorKind
    detail: str
}

// Represents a paired session.
dictionary Session {
    id: str    // random session id.
    peer: Peer // remote peer
}

enum SessionError {
    Duplicate
    InvalidId
}

callback P2pProvider {
    // Called when initiating the communication. Returns true if the 
    // requestee accepts to move along.
    fn hello(from: Peer) -> bool

    // Called with the initiator cid and password.
    fn on_dialed(from: Peer, params: json) -> json
}

#[rust:not-tracked]
interface Dweb {
    // DID related features.

    // Get all current managed DIDs. If none are present, returns an empty array.
    // Will reject only when encountering an internal error.
    fn get_dids() -> Did*, DidError

    // Create a new DID with the given name.
    fn create_did(name: str) -> Did, DidError

    // Removes a DID.
    fn remove_did(uri: str) -> void, DidError

    event didcreated -> Did
    event didremoved -> str // The uri of the removed DID

    // UCAN related features.

    // Hook up the UI implementation. This requires the 'dweb' permission
    // and can only be called once.
    fn set_ucan_ui(provider: UcanProvider)

    // Returns a base64 form of the token. This will trigger the UI to
    // let the user chose the issuer and capabilities.
    // The 'capabilities' parameter describes the set of requested capabilities.
    fn request_capabilities(audience: str, capabilities: Capability+) -> str, UcanError

    // For core apps, return a "superuser" token.
    fn request_superuser() -> str, UcanError

    // Retrieve the ucans granted for this origin as a base 64 encoded ucan.
    fn ucans_for(origin: str) -> Ucan*, UcanError

    // Peer discovery features.

    // Make ourselves discoverable, either only on the local network or globally.
    fn enable_discovery(local_only: bool, peer: Peer)

    // Turn off discovery. That will also stop all active peer discovery.
    fn disable_discovery()

    // Get the list of currently known peers.
    fn known_peers() -> Peer*

    // Add a peer to our followed list, using its DID.
    // fn follow_peer(did: str)

    // Remove a peer from our followed list.
    // fn unfollow_peer(did: str)

    // Event triggered when a new peer is discovered.
    event peerfound -> Peer

    // Event triggered when a known peer disappears.
    event peerlost -> Peer

    // Hook up the webrtc answer provider.
    fn set_p2p_provider(provider: P2pProvider)

    // Initiate the connection to a remote peer.
    // When successful, a new session is created.
    fn pair_with(peer: Peer) -> Session, ConnectError

    // dials a peer, passing the cid to retrieve and the password
    // to decrypt the payload.
    // Returns a value that is dependent on the cid content.
    fn dial(session: Session, params: json) -> json, ConnectError

    // Session management: apis to keep track of active pairings.

    // Get one existing session.
    fn get_session(id: str) -> Session, SessionError

    // Get all active sessions.
    fn get_sessions() -> Session*

    event sessionadded -> Session
    event sessionremoved -> str

    // Returns the full ticket to use to retrieve a file at that path
    // using iroh. 
    fn broadcast_file(path: str, mime: str?) -> str, str
}

service DwebService: Dweb
