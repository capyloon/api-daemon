// android.hardware.light@2.0::ILight
// This file was generated by hidl-gen for Rust

extern crate hidl_utils;
use hidl_utils::hidl::EmbeddedOps;
use hidl_utils::hidl::ParcelHelper;
use hidl_utils::hidl::{self, HidlError};

#[repr(C)]
pub struct LightState {
    pub color: u32,
    pub flash_mode: i32,
    pub flash_on_ms: i32,
    pub flash_off_ms: i32,
    pub brightness_mode: i32,
}

impl EmbeddedOps<LightState> for LightState {
    type EmStruct = LightState;
    fn elms_size(n: usize) -> usize {
        n * std::mem::size_of::<Self>()
    }
}

pub struct ILight {
    ibinder: Box<hidl::IBinder>,
}

impl ILight {
    pub fn get_service(service_name: &str) -> Option<ILight> {
        let ret = hidl::IBinder::query_service_manager(
            "android.hardware.light@2.0::ILight",
            service_name,
        );
        ret.map(|x| ILight {
            ibinder: Box::new(x),
        })
    }

    pub fn is_alive(&self) -> bool {
        self.ibinder.isalive()
    }

    // All methods defined in .hal
    pub fn set_light(&self, a_type: i32, a_state: &LightState) -> Result<i32, HidlError> {
        // Create a request
        let mut parcel = hidl::Parcel::default();
        parcel
            .write_iface_token("android.hardware.light@2.0::ILight")
            ?;
        // Arg: a_type
        {
            let _v = a_type;
            parcel.write_i32(_v)?;
        };
        // Arg: a_state
        {
            let _v = a_state;
            let mut handle: usize = 0;
            parcel.write_buffer(_v, &mut handle)?;
        };

        // Send the request
        let mut reply = hidl::Parcel::default();
        self.ibinder.transact(1, &parcel, &mut reply, 0)?;

        // Read the reply
        let mut version: u32 = 0;
        reply.read_u32(&mut version)?;

        Ok({
            let mut _v: i32 = 0;
            reply.read_i32(&mut _v)?;
            _v
        })
    }

    pub fn get_supported_types(&self) -> Result<Vec<i32>, HidlError> {
        // Create a request
        let mut parcel = hidl::Parcel::default();
        parcel.write_iface_token("android.hardware.light@2.0::ILight")?;

        // Send the request
        let mut reply = hidl::Parcel::default();
        self.ibinder.transact(2, &parcel, &mut reply, 0)?;

        // Read the reply
        let mut version: u32 = 0;
        reply.read_u32(&mut version)?;

        Ok({
            let mut _handle: usize = 0;
            let mut _v_hidl_vec = hidl_utils::hidl::HidlVec {
                bufaddr1: 0,
                bufaddr2: 0,
                sz: 0,
                owns_buf: false,
            };
            reply.read_buffer(&mut _handle, &mut _v_hidl_vec)?;
            reply.read_embedded::<Vec<i32>>(&_v_hidl_vec, _handle, 0)?
        })
    }
}
